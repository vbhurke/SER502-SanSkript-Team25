Current and Future Contributions: 

Siddharth Sharma (sshar278@asu.edu) :- Language Design - Worked on designing Boolean, clarified the principles of Boolean logic by introducing either 'true' or 'false' states. Utilized the Sanskrit keyword 'Likhyam', meaning 'writing' or 'script', to enhance the readability and expressiveness of code. Sample usage demonstrated the simplicity and effectiveness, offering a unique and culturally enriched alternative for displaying output. Introduced additional comparison operators, expanding the range of conditions that can be evaluated in control flow statements. 
Grammar - Introduced the concept of a program being composed of a block, which starts with the keyword 'Aarambh' and ends with 'Antah'. Grammar that supports multiple declarations, enabling the declaration of multiple variables in a single statement. Grammar for types of statements, display output, support for increment and decrement operations.

18th April, 2024 - Committed the code for program, block, declaration (including nested declarations) and print statement (included it in statement).
19th April, 2024 - Commited the code lexical analyzer
23rd April, 2024 - Added the evaluator code for relational identifiers.
26th April, 2024 - Made additional improvement in the lexical analyzer by making changes in the token specifiers and refining the tokenize function.
Future work - Start block execution(refining), Execution of queries. Checking for passing values to variables. 

Rushabh Gajab (rgajab@asu.edu) :- Language Design - clarified the syntax for variable assignment, emphasizing the usage of the '=' operator to associate a value with an identifier. Introduced and explained the ternary operator, provided a concise way to express conditional operations. Introduced the syntax for an if-then construct, clearly denoted the beginning of the block of statements.
Grammar - Grammar specifies clear syntax for both if-then and if-else blocks, ensuring readability and ease of use for programmers. Type of loop is accompanied by clear syntax, including variable declaration, loop conditions, and block execution. Made it clear that an expression is evaluated for conditions.

18th April, 2024 - Committed the code for conditional_block, statements, statement and also added sample test queries for the code.
19th April, 2024 - Committed the code for for-loop and for-in-range statements and for-loop and for-in-range and added sample test queries for the code.
23rd April, 2024 - Committed the code for statement assignment, lookup, increment operator and statement increment operator and added test cases for the code.
26th April, 2024 - Committed the code for conditional blocks, for loop, program evaluation, conditional blocks evaluation and print statements. 

Future work - Modifying keyword usage using preprocessing. Improving for loops, generalizing usage on backend while showcasing different syntax for loops for user to use. 


Milind Deshpande (mdeshp11@asu.edu) :- Language Design - Introduced the traditional for loop, providing flexibility of loops and a structured approach for executing a block of loop along with a concise way to iterate loops. Define a condition for iteration, and specify an increment or decrement operation within a single line. Provided clarity to conditional statements.
Grammar - Structured grammar to expressions, ensuring that operators are applied in the correct order, rules provide clarity and predictability in expression evaluation. Supporting grammar increment and decrement operations on, grammar includes support for boolean expressions, enabling the representation 

18th April, 2024 - Committed the code for identifier, variable assignment, variable declaration, and datatypes(for int, float, string, bool) and also the sample test queries for the code.
19th April, 2024 - Added evaluators addition, subtraction, multiplication and division operations.
23rd April, 2024 - Added evaluators for variable declaration, assignment operations and update operation.
26th April, 2024 - Added the main entrypoint script file of the project, added the function to convert the tokens list geenrated by the tokenize function to a suitable format for Prolog preprocessing, added the root directory path file.

Future work - Substituting values in expression, Expression with precedence, Evaluating logically based on precedence.


Viresh Bhurke (vbhurke@asu.edu) :- Language Design - Expanded the understanding of numeric types allowing for the representation of integer and floating-point. Introduced the concept of strings,ensured that string variables can be assigned values, contributing to the foundation of string handling. Defined identifiers to consist of both lowercase and uppercase characters, providing flexibility in naming variables and other program elements,  illustrated the range of identifiers supported by their programming language, enabling programmers to choose meaningful and descriptive names.
Grammar - grammar allows for the initialization and declaring variables, specifying the type, identifier, and optional initialization value. Grammar for data types, enabling programmers to work with different kinds of data efficiently.

18th April, 2024 - Committed the code for terms, expressions and storing inside expressions. Handled priorities in expressions and terms for brackets.
19th April, 2024 - Committed relational identifiers, while loop, incremental operations, loop for while and other loops to be stored in, loops for multiple loops.
23rd April, 2024 - adding conditions, updating loops by adding statements at end, correcting errors for easier in evaluator.
23rd April, 2024 - Added evaluator for for loop, while loop, loop and loops with test cases.
26th April, 2024 - Changes in lookup and update, added boolean and, or, not, string declaration, word predicate,evaluator for boolean and string declaration, test cases for booleans and tradition while and for loop. 

Future Work - Enviornment handling. Build and compilation in final environment. Various ways to declare variables. Multi string declaration. handling errors in declaration.
